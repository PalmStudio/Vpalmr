% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/make_opf.R
\name{make_opf_all}
\alias{make_opf_all}
\title{Make a set of opf file}
\usage{
make_opf_all(
  parameter,
  opf,
  AMAPStudio,
  overwrite = T,
  parallel = T,
  NbCores = NULL,
  java = NULL
)
}
\arguments{
\item{parameter}{The folder of the parameter files}

\item{opf}{The target folder for resulting OPF files}

\item{AMAPStudio}{The root path to AMAPStudio where VPalm lives}

\item{overwrite}{Boolean. Should pre-existing OPF files overwriten ?}

\item{parallel}{Boolean. Is the OPF making to be distributed on available machine cores?}

\item{NbCores}{The number of cores to use for parallel making. If \code{NULL} (the default)
uses all cores minus one.}

\item{java}{Java path (optionnal, see details)}
}
\value{
Creates one OPF file from each VPalm parameter file, and returns \code{TRUE} if all OPFs
were successfully written.
}
\description{
Make a call to \code{\link[=make_opf]{make_opf()}} successively on all VPalm parameter
files present on the \code{parameter} folder to create an Open Plant Format from
each.
}
\details{
The parameter folder should only contain parameter files. Subfolders
are tolerated though. The function uses \code{\link[parallel:detectCores]{parallel::detectCores()}} to find how many
cores are available on the machine. This function has known issues, see help for more
details. The \code{java} argument can be a path to the java
executable if the user needs a particular version (for example if the default Java used is the Open JDK,
because ARCHIMED is only compatible with the Oracle version).
}
